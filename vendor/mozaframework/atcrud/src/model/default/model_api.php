<?php
/**
 * This is the template for generating the model class of a specified table.
 */

use common\components\FHtml;
use yii\helpers\ArrayHelper;
use yii\helpers\Inflector;
use yii\helpers\StringHelper;

/* @var $this yii\web\View */
/* @var $generator yii\gii\generators\model\Generator */
/* @var $tableName string full table name */
/* @var $className string class name */
/* @var $queryClassName string query class name */
/* @var $tableSchema yii\db\TableSchema */
/* @var $labels string[] list of attribute labels (name => label) */
/* @var $rules string[] list of validation rules */
/* @var $relations array list of relations (name => relation declaration) */

$columnArray = [];
foreach ($tableSchema->columns as $column)
{
    $columnArray[] = $column->name;
}

$folder_name = Inflector::camel2id(StringHelper::basename($generator->modelClass));

echo "<?php\n";
?>

namespace <?= $generator->ns ?>;

use common\base\BaseAPIObject;
use common\components\FApi;

/**
 * This is the model class for table "<?= $generator->generateTableName($tableName) ?>".
 *
<?php foreach ($tableSchema->columns as $column): ?>
 * @property <?= "{$column->phpType} \${$column->name}\n" ?>
<?php endforeach; ?>
<?php if (!empty($relations)): ?>
 *
<?php foreach ($relations as $name => $relation): ?>
 * @property <?= $relation[1] . ($relation[2] ? '[]' : '') . ' $' . lcfirst($name) . "\n" ?>
<?php endforeach; ?>
<?php endif; ?>
 */
class <?= $className ?>API extends BaseAPIObject
{
<?php
$const_array = [];
foreach ($tableSchema->columns as $column) {
    if (!empty($column->comment)) {
        $array = FHtml::toArrayFromDbComment($column->comment, $column->name);
        if (isset($array['data'])) {
            $const_array = $array['data'];
            $str = '';
            foreach ($const_array as $key => $value) {
                if (is_numeric($value))
                    echo "    const " . strtoupper($column->name) . "_" . str_replace(' ', '', str_replace('-', '_', strtoupper($key))) ." = $value;\n";
                else
                    echo "    const " . strtoupper($column->name) . "_" . str_replace(' ', '', str_replace('-', '_', strtoupper($key))) ." = '$value';\n";
            }
        }
    }
}
if (!empty($const_array)) {
?>

<?php  } ?>
<?php
$display = array();
$hidden_fields = array_merge(FHtml::FIELDS_HIDDEN, ['is_active']);
foreach ($tableSchema->columns as $column) {
    if (!FHtml::isInArray($column->name, $hidden_fields)) {
        $display[] = "'$column->name'";
    }
}?>
    public function fields()
    {
        $fields = parent::fields(); // TODO: Change the autogenerated stub
        //$folder = '<?= $folder_name ?>';
        //$image = FApi::getImageUrlForAPI($this->image, $folder);
        //$this->image = $image;
        return $fields;
    }

    public function getApiFields()
    {
        //$fields = parent::getApiFields(); // TODO: Change the autogenerated stub
        $fields = [
<?php
$i = 1;
$len = count($display);
foreach ($display as $column) {
    if($i == $len) {
        $following = "\n";
    } else {
        $following = ",\n";
    }
?>
            <?=  $column . $following; ?>
<?php
    $i++;
}
?>
        ];
        return $fields;
    }
}