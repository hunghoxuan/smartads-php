<?php
/**
 * Created by PhpStorm.
 * User: LongPC
 * Date: 08/28/2018
 * Time: 11:34
 */

namespace common\widgets;

use common\components\FHtml;
use common\widgets\fchart\Chart;
use common\widgets\fchart\models\ChartPie;
use yii\base\Widget;
use yii\db\ActiveQuery;
use yii\helpers\StringHelper;


class FGridViewChart extends BaseWidget
{
	/**
	 * @var array
	 */
	protected $columns = [];
	public $toolbar;
	public $itemSize;
	public $actionColumn;
	public $emptyMessage;
	public $layout;
	//public $object_type;
	//public $dataProvider;
	//public $display_type;

	/**
	 * @var array
	 */
	protected $dataList = [];

	/**
	 *
	 */
	public function init() {
		parent::init(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return int
	 */
	public function getItemsCount() {
        return isset($this->dataProvider) ? $this->dataProvider->getTotalCount() : 0;
    }

	/**
	 * @param       $view
	 * @param array $params
	 * @param bool  $widgetRender
	 * @return string
	 * @throws \Exception
	 */
	public function render($view, $params = [], $widgetRender = true) {
	    $columns = $this->getColumns();
		$this->dataList = $this->dataProvider->getModels();
		$chart_html = '';
		foreach ($columns as $key => $column) {

            if (!FHtml::field_exists($this->object_type, $column))
                continue;
            $chart        = new ChartPie;
            $chart->items = $this->getChartItems($column);
            $chart->field = $column;
            $chart->getChart();
            $chart->total_item = $this->getItemsCount();
            $chart->title      = FHtml::getFieldLabel($this->object_type, $column);
           // $chart_html .= "<h1>" . FHtml::getFieldLabel($this->object_type, $column) . "</h1>";
            $chart_html .= Chart::widget(['data' => $chart, 'container' => false, 'title' => $chart->title]);

		}

		return $chart_html;
	}

	/**
	 * @return string|void
	 * @throws \Exception
	 */
	public function run()
    {
        $layout = $this->layout;
        $input = $this->render($this->display_type);
        $summary = '';

        echo FHtml::strReplace($layout, ['{items}' => $input, '{summary}' => $summary, '{pager}' => null]);
    }


	/**
	 * @param $column_name
	 * @return array
	 */
	protected function getChartItems($column_name) {
		$data = array_column($this->getDataList(), $column_name);
		$values = FHtml::getComboArray("$this->object_type.$column_name", $this->object_type, $column_name);
		$values1 = $values;
        sort($data);
		$data = array_count_values($data);
		$returnData = [];
        //echo $column_name . '<br/>';
        //FHtml::var_dump($values);
        //FHtml::var_dump($data);

		foreach ($data as $data_item => $data_total) {
		    $data_item = trim($data_item, ",");
		    if ((!empty($values) && key_exists($data_item, $values))) {
		        unset($values1[$data_item]);
		        $data_item = $values[$data_item];
            }
            if (empty($data_item) || $data_item == FHtml::NULL_VALUE) {
                if (StringHelper::startsWith($column_name, 'is_') && empty($data_total))
                    continue;
                $data_item = "<span style='color:gray'>" . FHtml::t('common', 'Empty') . " </span>";
            }

            $returnData[] = [
                $column_name => $data_item,
                'total' => $data_total,
                'field' => $column_name,
                'label' => $data_item
            ];
        }
        foreach ($values1 as $i => $data_item) {
            if (empty($data_item) || $data_item == FHtml::NULL_VALUE) {
                if (StringHelper::startsWith($column_name, 'is_'))
                    continue;
                $data_item = "<span style='color:gray'>" . FHtml::t('common', 'Empty') . " </span>";
            }

            $returnData[] = [
                $column_name => $data_item,
                'total' => 0,
                'field' => $column_name,
                'label' => $data_item
            ];
        }
        usort($returnData, function ($a, $b) { return $a["total"] <= $b["total"]; });
        return $returnData;
//		if (count($data) == 1) {
//            $returnData = [
//                [
//                    $column_name => isset($data[1]) ? FHtml::getFieldLabel($this->object_type, $column_name) : FHtml::t('common', 'No'),
//                    'total'      => isset($data[1]) ? $data[1] : $data[0]
//                ]
//            ];
//        }
//        elseif(count($data) >= 2) {
//		    $returnData = [
//                [
//                    $column_name => FHtml::getFieldLabel($this->object_type, $column_name),
//                    'total'      => $data[1]
//                ],
//                [
//                    $column_name => FHtml::t('common', 'No'),
//                    'total'      => $data[0]
//                ],
//            ];
//        }
		//return $returnData ;
	}

	/**
	 * @return array
	 */
	public function getDataList() {
		return $this->dataList;
	}

	/**
	 * @param array $dataList
	 */
	public function setDataList($dataList) {
		$this->dataList = $dataList;
	}

	/**
	 * @return array
	 */
	public function getColumns() {
		return $this->columns;
	}

	/**
	 * @param array $columns
	 */
	public function setColumns($columns) {
//	    foreach ($columns as $i => $column) {
//            if (!FHtml::field_exists($this->object_type, $column))
//                unset($columns[$i]);
//        }
		$this->columns = $columns;
	}

	/**
	 * @return string
	 */
	public function createToolbar()
    {
        if (empty($this->toolbar)) {
            $currentRole = FHtml::getCurrentRole();
            $moduleName = FHtml::currentModule();
            $createButton = '';
            if (FHtml::isInRole('', 'create', $currentRole)) {
                $createButton = FHtml::a('<i class="glyphicon glyphicon-plus"></i>&nbsp;' . FHtml::t('common', 'Create'), ['create'],
                    [
                        'role' => $this->params['editType'],
                        'data-pjax' => $this->params['isAjax'] == true ? 1 : 0,
                        'title' => FHtml::t('common', 'title.create'),
                        'class' => 'btn btn-success',
                        'style' => 'float:left;'
                    ]);
            }

            $this->toolbar = $createButton;
        }
        return "<div class='row' style='margin-left:10px;padding-bottom:5px;margin-right:10px'>" . $this->toolbar . "</div>";
    }

	/**
	 * @return string
	 */
	public function renderEmpty()
    {
        return "<div class='row clear-both'>" . "<div style='padding:10px'>" . FHtml::showEmptyMessage($this->emptyMessage) . "</div></div>";
        //return "<div class='row clear-both'>" . self::createToolbar() . "<div style='padding:10px'>" . FHtml::showEmptyMessage() . "</div></div>";
    }
}