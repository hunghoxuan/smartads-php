<?php

/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace common\base;

use backend\modules\system\models\SettingsApiAPI;
use common\components\FApi;
use Yii;
use common\components\FHtml;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\helpers\StringHelper;

class BaseAction extends \yii\base\Action
{
    const STATUS_STARTED = 'Open';
    const STATUS_FAIL = 'Fail';
    const STATUS_FINISHED = 'Close';

    const FAIL_MESSAGE = 'False';
    const EMPTY_MESSAGE = 'Empty';
    const NOTFOUND_MESSAGE = 'Not Found';
    const INVALID_FOOTPRINT_MESSAGE = 'Invalid FootPrint';

    const DENIED_MESSAGE = 'Denied';
    const MAX_DURATION = 20;

    public $checkAccess;
    public $listname;
    public $objectname;
    public $objectid;
    public $fields;
    public $params;
    public $paramsArray;
    public $orderby;
    public $limit = 20;
    public $offset = 0;
    public $page;
    public $lang;
    public $application_id;
    public $category_id;
    public $user_id = 0;
    public $token;
    public $keyword;
    public $time;
    public $foot_print;
    public $page_limit;
    public $page_index;
    public $page_offset;
    public $sort_by;

    protected $fields_required = false;
    protected $model_fields;
    protected $output_fields = [];
    protected $output;
    protected $user_role = 'user';

    public $object_id;
    public $object_type;
    public $parent_id;

    public $is_secured = true;
    public $is_internal = false;
    public $is_active = true;
    public $permission = [];
    public $check_footprint = false;
    public $check_token = false;
    public $check_time = false;
    protected $setting_model;
    public $allow_IPs = [];
    public $block_IPs = [];

    protected function getSettingAPIModel()
    {
        if (FHtml::settingDynamicAPIEnabled()) {
            if (!isset($this->setting_model)) {
                $this->setting_model = SettingsApiAPI::findOne(['code' => $this->id]);
            }

            if (isset($this->setting_model) && !empty($this->setting_model->id)) {
                $this->is_active = $this->setting_model->is_active;
            }
        }

        return $this->setting_model;
    }



    public function beforeRun()
    {
        Yii::$app->response->statusCode = 200;

        Yii::$app->response->getHeaders()->add('Access-Control-Allow-Origin', '*');
        Yii::$app->response->getHeaders()->add('response', 200);
        Yii::$app->response->getHeaders()->add('content-encoding', 'br');


        $this->prepareParams();
        return parent::beforeRun(); // TODO: Change the autogenerated stub
    }

    /**
     * Runs this action with the specified parameters.
     * This method is mainly invoked by the controller.
     *
     * @param array $params the parameters to be bound to the action's run() method.
     * @return mixed the result of the action
     * @throws InvalidConfigException if the action class does not have a run() method
     */
    public function runWithParams($params)
    {
        $debug = FHtml::getRequestParam(['debug', 'show_error', 'error']);
        try {
            $check = $this->beforeRun();
            if ($check === true) {
                return parent::runWithParams($params);
            } elseif (is_array($check) && !empty($check))
                return $check;
            else
                return null;
        } catch (\yii\db\Exception $ex) {
            if (FHtml::currentController() == 'api' && !$debug) {
                return ['message' => $ex->getMessage(), 'code' => FApi::ERROR_FAIL, 'status' => FApi::FAIL];
                die;
            }
            throw $ex;
        } catch (\yii\base\Exception $ex) {
            if (FHtml::currentController() == 'api' && !$debug) {
                return ['message' => $ex->getMessage(), 'code' => FApi::ERROR_FAIL, 'status' => FApi::FAIL];
                die;
            }
            throw $ex;
        } catch (\yii\base\ErrorException $ex) {
            if (FHtml::currentController() == 'api' && !$debug) {
                return ['message' => $ex->getMessage(), 'code' => FApi::ERROR_FAIL, 'status' => FApi::FAIL];
                die;
            }
            throw $ex;
        }
    }

    protected function prepareParams()
    {
        $this->listname = isset($this->listname) ? $this->listname : FHtml::getRequestParam(['object', 'n', 'name', 'list', 'listname', 'table']);
        $this->objectname = isset($this->objectname) ? $this->objectname : FHtml::getRequestParam(['object', 'n', 'name', 'detail', 'objectname', 'table']);
        $this->objectid = isset($this->objectid) ? $this->objectid : FHtml::getRequestParam(['id', 'objectid']);
        $this->fields = isset($this->fields) ? $this->fields : FHtml::getRequestParam(['fields', 'columns']);
        if (is_string($this->fields))
            $this->fields =  explode(',', $this->fields); // FHtml::decode($this->fields, true);
        $this->keyword = isset($this->keyword) ? $this->keyword : FHtml::getRequestParam(['keyword', 'k']);
        $this->params = isset($this->params) ? $this->params : FHtml::getRequestParam(['params', 'search', 'filter', 's']);
        $this->orderby = isset($this->orderby) ? $this->orderby : FHtml::getRequestParam(['sort', 'order', 'sort_by', 'order_by', 'orderby']);
        $this->sort_by = $this->orderby;

        $this->limit = isset($this->limit) ? $this->limit : FHtml::getRequestParam(['limit', 'page_size', 'pagesize', 'page_limit'], -1);
        $this->page_limit = $this->limit;

        $this->page = isset($this->page) ? $this->page : FHtml::getRequestParam(['page', 'p', 'page_index'], 1);
        $this->page_index = $this->page;

        $this->page_offset = isset($this->page_offset) ? $this->page_offset : FHtml::getRequestParam(['page_offset', 'offset', 'data_offset'], 0);
        $this->object_id = isset($this->object_id) ? $this->object_id : FHtml::getRequestParam(['object_id', 'objectid']);
        $this->object_type = isset($this->object_type) ? $this->object_type : FHtml::getRequestParam(['object_type', 'objecttype']);
        $this->parent_id = isset($this->parent_id) ? $this->parent_id : FHtml::getRequestParam(['parent_id', 'parent_id']);

        $this->lang = isset($this->lang) ? $this->lang : FHtml::getRequestParam(['lang', 'l']);
        $this->application_id = isset($this->application_id) ? $this->application_id : FHtml::getRequestParam(['application_id', 'client_id']);
        $this->user_id = isset($this->user_id) ? $this->user_id : FHtml::getRequestParam(['user_id', 'userid', 'user']);
        $this->token = isset($this->token) ? $this->token : FHtml::getRequestParam('token');
        $this->time = FHtml::getRequestParam(['Time', 'time', 'time_stamp']);
        $this->foot_print = FHtml::getRequestParam(['FootPrint', 'footprint', 'foot_print']);

        $this->paramsArray = [];
        //Default Search Params: lang, application_id
        $this->paramsArray = FHtml::mergeRequestParams(
            $this->paramsArray,
            [
                'lang' => $this->lang,
                'application_id' => $this->application_id,
            ]
        );

        if (!empty($this->params))
            $this->paramsArray = FHtml::mergeRequestParams($this->paramsArray, FHtml::decode($this->params));
    }

    public function checkAccess($check = null)
    {
        if (isset($check))
            return $check;

        return $this->isAuthorized();
    }

    public function isAuthorized()
    {
        $currentUserId = FHtml::currentUserId();
        $currentIP = FHtml::currentIPAddress();

        if (!$this->is_active)
            return FApi::getOutputDenied();;

        if ($this->is_internal && empty($currentUserId))
            return FApi::getOutputDenied();

        if (!empty($this->allow_IPs) && !in_array($currentIP, $this->allow_IPs))
            return FApi::getOutputDenied();

        if (!empty($this->block_IPs) && in_array($currentIP, $this->block_IPs))
            return FApi::getOutputDenied();

        //not require secured action
        if (!$this->is_secured) {
            return true;
        }

        if (FHtml::settingAPICheckFootPrint()) {
            //Check FootPrint & Time
            if (empty($this->foot_print) || empty($this->time))
                return FApi::getOutputInvalidToken();

            $request_params = FHtml::RequestParams(['FootPrint', 'foot_print', 'footprint']);
            $params = array_values($request_params);

            $check = FHtml::checkFootPrint($this->foot_print, $this->time, $params, $this->check_footprint, $this->check_time);

            if (!empty($check))
                return FApi::getOutputDenied();
        }
        return true;
    }

    public function showJson($models, $type = '', $message = '', $totalPage = 1, $pageSize = 0, $pageIndex = 0, $dataParam = 'data')
    {
        return FHtml::getOutputForAPI($models, $type, $message, $dataParam, $totalPage, $pageSize, $pageIndex);
    }

    protected function html_decode_x2($xml_string_html)
    {
        if (count($xml_string_html) > 0)
            return strip_tags(html_entity_decode(html_entity_decode(str_replace("&nbsp;", "", $xml_string_html))));
        else return $xml_string_html;
    }

    public function showXml2($models, $extra_values = [])
    {
        return $this->showXml($models, [], '', [], $extra_values);
    }

    public function showXml($model, $groups = [], $root = '', $default_values = [], $extra_values = [])
    {
        if (!isset($model))
            return self::FAIL_MESSAGE . ':' . self::NOTFOUND_MESSAGE;

        if (empty($root))
            $root = $this->id;

        $result = '';

        $root_item = str_replace('List', '', $root);
        $root_item = str_replace('Info', '', $root_item);

        if (is_array($model) && empty($groups)) {
            if (ArrayHelper::isIndexed($model)) {
                $models = $model;
                $i = 1;
                $count = count($models);
                $result .= "<{$root_item}Count>$count</{$root_item}Count>";
                foreach ($models as $model) {
                    $result .= self::showXml($model, [], $root_item . 'Info' . $i);
                    $i = $i + 1;
                }
            } else {
                $result .= self::showXml($model, array_keys($model));
            }
        } else {
            if (empty($groups) && is_object($model))
                /* @var $model ActiveRecord */
                $groups = array_values($model->fields());

            foreach ($groups as $group => $fields) {
                $result1 = '';

                if (is_string($group)) {
                    if (is_array($fields)) {
                        $result1 .= self::showXml($model, $fields, '', $default_values);
                        $result .= "\t<$group>\n$result1\n\t</$group>\n";
                    } else if (is_string($fields)) {
                        $result1 = $fields;
                        $result .= "\t<$group>\n$result1\n\t</$group>\n";
                    } else if (empty($fields)) {
                        $result1 = FHtml::getFieldValue($model, $group);
                        $result .= "\t<$group>$result1</$group>\n";
                    }
                } else if (is_numeric($group) && is_string($fields)) {

                    if (StringHelper::endsWith($fields, '$i')) {
                        $result1 = '';
                        for ($i = 1; $i < 20; $i++) {
                            $field_name = str_replace('$i', $i, $fields);
                            $field_name1 = str_replace('_', '', ucfirst($field_name));

                            $field_value = FHtml::getFieldValue($model, [$field_name, $field_name1]);

                            if (!empty($field_value)) {
                                $result1 .= "\t\t<$field_name1>$field_value</$field_name1>\n";
                            }
                        }
                        $result .= "$result1";
                    } else {

                        $field_name = $fields;
                        $field_name1 = str_replace('_', '', ucfirst($field_name));

                        $field_value = FHtml::getFieldValue($model, [$field_name, $field_name1]);

                        if (empty($field_value) && !empty($default_values) && key_exists($fields, $default_values))
                            $field_value = $default_values[$fields];

                        if ($field_value === true)
                            $field_value = 'True';
                        else if ($field_value === 0)
                            $field_value = 'False';
                        else if (is_array($field_value)) {
                            //var_dump($field_value);
                            $field_value = self::showXml($field_value, array_keys($field_value));
                        }

                        $result .= "\t\t<$field_name1>$field_value</$field_name1>\n";
                    }
                }
            }
        }

        if (!empty($extra_values) && is_array($extra_values)) {
            foreach ($extra_values as $field_name => $field_value) {
                $field_name1 = str_replace('_', '', ucfirst($field_name));
                $result .= "\t\t<$field_name1>$field_value</$field_name1>\n";
            }
        }

        if (!empty($root))
            $result = "<$root>\n$result\n</$root>";

        $result = str_replace("\t", '', $result);
        $result = str_replace("\n", '', $result);
        return $result;
    }

    public static function createInstance($params = [])
    {
        $model = Yii::createObject(self::className(), ['', FHtml::currentControllerObject(), []]);
        foreach ($params as $key => $value) {
            FHtml::setFieldValue($model, $key, $value);
        }
        return $model;
    }

    public static function runAction($params = [])
    {
        return self::createInstance($params)->run();
    }

    protected function getData($data, $arr = null)
    {

        if (!isset($data))
            $data = [];

        //dynamic api data
        $setting_model = $this->setting_model;

        if (isset($setting_model)) {
            if ($setting_model->type == 'data' || empty($setting_model->type))
                $arr = $setting_model->data;
            else if ($setting_model->type == 'array') {
                $data['data_type'] = $setting_model->type;
                $data['data_content'] = $setting_model->data_array;
            } else  if ($setting_model->type == 'html') {
                $data['data_type'] = $setting_model->type;
                $data['data_content'] = $setting_model->data_html;
            } else  if ($setting_model->type == 'link') {
                $data['data_type'] = $setting_model->type;
                $data['data_content'] = $setting_model->data_link;
            }

            //            $arr[] = ['name' => 'blogs', 'object_type' => 'cms_blogs_api', 'filter' => [], 'order_by' => "name asc, id desc", 'limit' => 5, 'fields' => ['name', 'description', 'created_date']];
            //            $arr[] = ['name' => 'products', 'object_type' => 'product', 'order_by' => 'id desc', 'limit' => -1, 'fields' => ['name', 'overview', 'created_date']];
        }

        if (is_array($arr) && !empty($arr)) {
            foreach ($arr as $item => $arr_item) {
                $name = FHtml::getFieldValue($arr_item, 'name');
                $object_type = FHtml::getFieldValue($arr_item, 'object_type');
                $order_by = FHtml::decode(FHtml::getFieldValue($arr_item, 'order_by'));
                $limit = FHtml::getFieldValue($arr_item, 'limit', -1);

                $fields = FHtml::decode(FHtml::getFieldValue($arr_item, 'fields'), ',');
                $filter = FHtml::decode(FHtml::getFieldValue($arr_item, 'filter'));

                $data[$name] = FHtml::getModels($object_type, $filter, $order_by, $limit, 1, false, true, $fields);
            }
        }

        return $data;
    }

    protected function getResponse($data, $type = '', $message = '', $dataParams = [], $totalPage = 1, $pageSize = 0, $pageIndex = 0)
    {
        if (($re = $this->isAuthorized()) !== true)
            return $re;

        $data = $this->getData($data);

        return FApi::getOutputForAPI($data, $type, $message, $dataParams, $totalPage, $pageSize, $pageIndex);
    }
}
