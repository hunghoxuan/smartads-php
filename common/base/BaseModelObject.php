<?php

namespace common\base;

use common\components\FActiveQuery;
use common\components\FConfig;
use common\components\FConstant;
use common\components\FContent;
use common\components\FFile;
use common\components\FFrontend;
use common\components\FHtml;
use common\components\FModel;
use common\components\FSecurity;
use common\models\BaseModel;
use frontend\models\ViewModel;
use kcfinder\path;
use yii\base\InvalidCallException;
use yii\base\InvalidConfigException;
use yii\base\InvalidParamException;
use yii\base\UnknownMethodException;
use yii\base\UnknownPropertyException;
use yii\db\ActiveQuery;
use yii\db\ActiveQueryInterface;
use yii\db\ActiveRecord;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\helpers\BaseInflector;
use yii\helpers\Inflector;
use yii\helpers\StringHelper;

class BaseModelObject extends ActiveRecord
{
    const COLUMNS_API = [];
    const COLUMNS_UPLOAD = [];
    const COLUMNS_CREATED_BY = [];
    const COLUMNS_CREATED_AT = [];
    const COLUMNS_ATTRIBUTES = [];
    const COLUMNS_ACTIVATED = [];
    const DEFAULT_VALUES = [];

    const OBJECTS_RELATED = [];
    const COLUMNS_ARRAY = [];
    const LOOKUP          = [];
    const STATUS_OLD = 0;
    const STATUS_NORMAL = 1;
    const DISCOUNT_TYPE_MONEY = 0;

    private $objectAttributesArray = [];

    public static function tableName()
    {
        return '';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return null;
    }

    public static function tableSchema()
    {
        return null;
    }

    protected $db = null;
    public function getModelDb()
    {
        if (isset($this->db))
            return $this->db;
        $this->db = static::getDb();
        return $this->db;
    }

    public function setModelDb($db)
    {
        $this->db = $db;
    }

    public static function getDbType()
    {
        return '';
    }

    public static function getDbName()
    {
        return '';
    }

    public static function getDbSettings()
    {
        return [];
    }

    protected $_id;
    public function getId()
    {
        if (isset($this->_id)) {
            return $this->_id;
        }
        return $this->getPrimaryKeyValue();
    }

    public function setId($value)
    {
        $this->_id = $value;
        $this->primaryKey = $value;
    }

    public static function isSqlDb()
    {
        return is_object(static::getDb());
    }

    public static function isPHPFileDb()
    {
        return static::getDbType() == FConstant::DB_TYPE_PHP;
    }

    public static function setting($key, $default_value = null)
    {
        return $default_value;
    }

    public static function modelName()
    {
        return Inflector::camel2id(StringHelper::basename(get_called_class()), '_');
    }

    public static function createModel($data = [], $columnsMapping = null)
    {
        $model = FHtml::createModel(static::modelName());

        FHtml::loadParams($model, $data, $columnsMapping);
        return $model;
    }

    public static function settingDynamicFieldEnabled()
    {
        return false;
    }

    public function getUploadFields()
    {
        return static::COLUMNS_UPLOAD;
    }

    public function getRequiredFields()
    {
        return FHtml::getRequiredFields($this);
    }

    //public $_ObjectFile;
    public function getPreviewFields()
    {
        return ['name', 'description', 'is_active'];
    }

    public function getArrayFields()
    {
        return ['category_id'];
    }


    public function load($data = null, $formName = null)
    {
        if (!isset($data))
            $data = $_POST;

        $this->loadParams($data);
        $result = parent::load($data, $formName);

        return $result;
    }

    public function loadParams($params)
    {
        return FHtml::loadParams($this, $params);
    }

    /**
     * @param array $data
     * @return $this
     */
    public static function getInstance($data = [])
    {
        return static::createModel($data);
    }

    /**
     * @return mixed
     */
    public static function getTableColumns()
    {
        return [];
    }

    public static function getTableSchema($db = null)
    {
        return null;
    }

    public function attributes()
    {
        $schema = static::getTableSchema();

        if (isset($schema))
            return array_keys($schema->columns);
        else {
            return $this->fields();
        }
    }

    public function fields()
    {
        return []; // TODO: Change the autogenerated stub
    }

    public static function primaryKey()
    {
        return 'id';
    }

    public function getCustomAttribute($meta_key, $default_value = null)
    {
        $keys = [$meta_key, str_replace(".", "_", $meta_key)];
        foreach ($keys as $key) {
            if (key_exists($key, $this->objectAttributesArray))
                return $this->objectAttributesArray[$key];

            if (key_exists($key, $this->customObjectArray))
                return $this->objectAttributesPrivateArray[$key];
        }
        return $default_value;
    }

    public function setCustomAttribute($meta_key, $meta_value)
    {
        $this->objectAttributesArray[$meta_key] = $meta_value;
    }

    public function __get($name)
    {
        if (in_array($name, ['primaryKeyValue']))
            return null;

        try {
            return parent::__get($name);
        } catch (UnknownPropertyException $ex) {
            return $this->getCustomAttribute($name);
        } catch (Exception $ex) {
            return $this->getCustomAttribute($name);
        }
    }

    public function __set($name, $value)
    {
        try {
            return parent::__set($name, $value);
        } catch (UnknownPropertyException $ex) {
            return $this->setCustomAttribute($name, $value);
        } catch (InvalidCallException $ex) {
            return $this->setCustomAttribute($name, $value);
        } catch (Exception $ex) {
            return $this->setCustomAttribute($name, $value);
        }
    }

    public static function getSettingValueByKey($key, $default_value = '')
    {
        return FConfig::config($key, $default_value);
    }

    public function isCustomField($name)
    {
        if (FHtml::field_exists($this, $name))
            return true;

        if (StringHelper::startsWith($name, '_') || StringHelper::startsWith($name, '@'))
            return true;
        $arr = $this->getCustomFields();
        return in_array($name, $arr);
    }

    public function getCustomFields()
    {
        $result = [];
        return $result;
    }

    public function setFieldValue($fieldname, $value)
    {
        return $this->setAttribute($fieldname, $value);
    }

    /**
     * @param bool $isSave
     * @param array $values
     * @return BaseDataObject
     */
    public static function createNew($values = [], $isSave = false)
    {
        /** @var BaseDataObject $model */
        $model = static::createModel($values);

        if (isset($model) && is_object($model) && $isSave) {
            if (!$model->save())
                FHtml::addError($model->errors);
        }

        return $model;
    }

    public static function findArray($condition = [], $order_by = [], $page_size = -1, $page = 1, $isCached = false, $display_fields = [], $asArray = true, $load_activeonly = true)
    {
        return static::findAll($condition, $order_by, $page_size, $page, $isCached, $display_fields, $asArray, $load_activeonly);
    }

    public static function findAll($condition = [], $order_by = [], $page_size = -1, $page = 1, $isCached = false, $display_fields = [], $asArray = false, $load_activeonly = true)
    {
        if (is_numeric($condition) && !empty($condition)) { //findOne
            return static::findOne($condition, $display_fields, $asArray);
        }

        return static::find()->where($condition)->orderBy($order_by)->limit($page_size)->offset($page * $page_size - $page_size)->asArray($asArray)->all();
    }

    public static function findOne($condition, $selected_fields = [], $asArray = false, $applications_enabled = true)
    {
        return static::find()->where($condition)->one();
    }

    public function saveUploadFiles()
    {
        $tableName = $this::tableName();
        if (!empty($_FILES)) {
            FFile::saveUploadedFile($_FILES[BaseInflector::camelize($tableName)], FModel::getUploadFolder($tableName));
        }
    }

    public static function saveAll($condition = [], $params = [])
    {
        if (empty($params) && is_array($condition)) {
            $models = $condition;
        } else {
            $models = static::findAll($condition);
        }

        if (is_array($models)) {
            foreach ($models as $model)
                $model->save();
        }
    }

    //Attributes - Start
    private $customObjectArray = [];
    public function getCustomObject($key, $object = null)
    {
        $value = key_exists($key, $this->customObjectArray) ? $this->customObjectArray[$key] : null;
        if (!isset($value) && isset($object)) {
            $value = $object;
            $this->customObjectArray[$key] = $value;
        }
        return $value;
    }

    public function setCustomObject($key, $object)
    {
        $this->customObjectArray[$key] = $object;
        return $object;
    }

    public function setCustomObjectFieldValue($key, $field, $value)
    {
        $object = $this->getCustomObject($key);
        if (isset($object)) {
            FHtml::setFieldValue($object, $field, $value);
            $this->setCustomObject($key, $object);
        }
        return $object;
    }

    public function getCustomObjectFieldValue($key, $field, $value = null)
    {
        $object = $this->getCustomObject($key);
        return isset($object) ? FHtml::getFieldValue($object, $field) : $value;
    }

    public function getAttributesArray($selected_fields = [])
    {
        if (empty($selected_fields)) {
            //get all possible fields & attributes
            $selected_fields = array_unique(array_merge(array_keys($this->getObjectAttributesArray()), array_merge($this->attributes(), $this->fields())));
        }

        $result = [];

        foreach ($selected_fields as $field => $field_value) {
            if (is_numeric($field)) {
                $field = $field_value;
                $field_value = null;
            }
            if (!isset($field_value)) {
                $field_value = FHtml::getFieldValue($this, $field);
            } else if (is_callable($field_value)) {
                $field_value = call_user_func($field_value, $this);
            }

            $result[$field] = $field_value;
        }

        return $result;
    }

    public function asArray($selected_fields = [])
    {
        $arr = $this->getAttributesArray($selected_fields);
        return $arr;
    }

    public function getObjectAttributesArray()
    {
        return $this->objectAttributesArray;
    }

    public function primaryKeyField()
    {
        $keys = static::primaryKey();
        if (is_array($keys) && count($keys) == 1 && is_string($keys[0]))
            $keys = $keys[0];
        return !empty($keys) ? $keys : 'id';
    }

    public function primaryKeyValue()
    {
        return $this->getPrimaryKeyValue();
    }

    public function getPrimaryKeyValue()
    {
        $asArray = false;
        $keys = $this->primaryKeyField();

        if (empty($keys))
            return null;

        if (is_string($keys) && !empty($keys) && FHtml::field_exists($this, $keys))
            return $this->{$keys};

        $attributes = $this->getAttributes();
        if (!$asArray && is_array($keys) && count($keys) === 1) {
            return isset($attributes[$keys[0]]) ? $attributes[$keys[0]] : null;
        } else if (is_array($keys)) {
            $values = [];
            foreach ($keys as $name) {
                $values[$name] = isset($attributes[$name]) ? $attributes[$name] : null;
            }

            return $values;
        }

        return null;
    }

    public function getFieldValue($fieldname, $empty_value = null, $find_not_empty = false)
    {
        if (is_array($fieldname))
            $arr = $fieldname;
        else {
            if (strpos($fieldname, ',') !== false || strpos($fieldname, ' ') !== false || strpos($fieldname, '(') !== false || strpos($fieldname, '{') !== false || strpos($fieldname, '[') !== false || strpos($fieldname, '}') !== false) {
                return FModel::getFieldExpression($this, $fieldname, $empty_value);
            }

            $arr = [$fieldname];
        }

        foreach ($arr as $fieldname) {
            $getMethod  = "get" . ucfirst($fieldname);
            if (FHtml::field_exists($this, $fieldname)) {
                $result = $this->{$fieldname};
            } else if (method_exists($this, $getMethod)) {
                $result = $this->{$getMethod}();
            } else {
                $result = $this->getCustomAttribute($fieldname);
            }

            if ($find_not_empty) {
                if (!empty($result)) {
                    return $result;
                }
            } else {
                if (isset($result)) {
                    return $result;
                }
            }
        }

        return $empty_value;
    }

    public function getPrimaryKey($asArray = false)
    {
        $keys = $this->primaryKeyField();
        return $keys;
    }

    public static function getQueryObject($class_name = '')
    {
        if (empty($class_name))
            $class_name = get_called_class();

        $query = \Yii::createObject(FActiveQuery::className(), [$class_name]); //using FActiveQuery
        return $query;
    }

    public static function findActiveQuery()
    {
        return parent::find();
    }

    /**
     * @inheritdoc
     * @return FActiveQuery the newly created [[FActiveQuery]] instance.
     * @throws InvalidConfigException
     */
    public static function find($dbType = null)
    {
        //get default find
        if (is_bool($dbType) && $dbType == false)
            return parent::find();

        /** @var BaseModel $model */
        $model = static::createModel();

        // loi
        if (isset($model) && static::className() != $model::className()) {
            if (StringHelper::startsWith($model::className(), "applications")) {
                return $model::find($dbType);
            }
        }

        $class_name = get_called_class();

        $condition = [];

        if (is_array($dbType)) //find by Condition
        {
            $dbType = null;
            $condition = $dbType;
        }

        if (empty($dbType) && isset($model)) {
            $dbType = $model->getDbType();
            $db = $model->getDb();
        } else if (is_object($dbType)) {
            $db = $dbType;
            $dbType = '';
        } else {
            $db = FHtml::currentDb($dbType, static::tableName());
        }

        $query = static::getQueryObject($class_name);

        if (isset($query)) {
            if (FHtml::field_exists($query, 'model')) {
                $query->model = $model;
                $query->db = $db;
            }

            if (!empty($condition))
                $query = $query->andWhere($condition);
        }

        return $query;
    }

    //Errors
    /**
     * Adds a new error to the specified attribute.
     * @param string $attribute attribute name
     * @param string $error new error message
     */
    public function addError($attribute, $error = '')
    {
        if (empty($error))
            parent::addError('Errors', $attribute);
        else
            parent::addError($attribute, $error);
    }

    public function getErrorsMessages()
    {
        $result = [];
        foreach ($this->errors as $attribute => $error) {
            if (is_string($error))
                $message = $error;
            else if (is_array($error) && isset($error[0]) && is_string($error[0]))
                $message = $error[0];
            else
                $message = '';

            $result[] = $this->getAttributeLabel($attribute) . ': ' . FHtml::t('messages', str_replace(BaseInflector::camel2words($attribute), '', $message));
        }
        return $result;
    }

    private $innerMessage;
    public function getInnerMessage()
    {
        if (!empty($this->errors)) {
            $this->innerMessage = (empty($this->innerMessage) ? '' : $this->innerMessage) . ' ' . FHtml::t('common', 'Errors') . ': ';
            $errors = $this->getErrorsMessages();
            $this->innerMessage .= implode('; ', $errors);
        }

        return $this->innerMessage;
    }

    public function getOwnerIdField()
    {
        return $this->getCreatedUserIdField();
    }

    public function getCreatedUserIdField()
    {
        $arr = array_merge(is_array(self::COLUMNS_CREATED_BY) ? self::COLUMNS_CREATED_BY : [self::COLUMNS_CREATED_BY], ['created_by', 'created_user', 'owner_id']);
        foreach ($arr as $field) {
            if (FHtml::field_exists($this, $field))
                return $field;
        }
        return null;
    }

    public function getCreatedAtField()
    {
        $arr = array_merge(is_array(self::COLUMNS_CREATED_AT) ? self::COLUMNS_CREATED_AT : [self::COLUMNS_CREATED_AT], ['created_at', 'created_date']);
        foreach ($arr as $field) {
            if (FHtml::field_exists($this, $field))
                return $field;
        }
        return null;
    }

    public function getIsActiveField()
    {
        $arr = array_merge(is_array(self::COLUMNS_ACTIVATED) ? self::COLUMNS_ACTIVATED : [self::COLUMNS_ACTIVATED], ['is_active', 'status']);
        foreach ($arr as $field) {
            if (FHtml::field_exists($this, $field))
                return $field;
        }
        return null;
    }

    public function getApplicationIdField()
    {
        return 'application_id';
    }

    public function getPermission($field = '', $action = '', $role = '', $user_id = '')
    {
        return true;
    }

    public function getDefaultValue($field, $default_value = null)
    {
        return $default_value;
    }

    public function beforeInsert()
    {
        $createdUserField = $this->getCreatedUserIdField();
        if (!empty($createdUserField)) {
            $this->{$createdUserField} = $this->getDefaultValue($createdUserField, FHtml::currentUserId());
        }
        $createdAtField = $this->getCreatedAtField();
        if (!empty($createdAtField)) {
            $this->{$createdAtField} = $this->getDefaultValue($createdAtField, date('Y-m-d H:i:s'));
        }
        $activatedField = $this->getIsActiveField();
        if (!empty($activatedField)) {
            $this->{$activatedField} = $this->getDefaultValue($activatedField, FHtml::isRoleUser() ? 0 : 1);
        }

        if ($this->field_exists('application_id'))
            $this->application_id = FHtml::currentApplicationCode();
    }

    private $_progressing = null;
    public function beforeSave($insert)
    {
        if ($insert || $this->isNewRecord) {
            $this->beforeInsert();
        }

        if (FHtml::isRoleUser()) {
            $activatedField = $this->getIsActiveField();
            if (!empty($activatedField)) {
                $this->{$activatedField} = $this->isNewRecord ? $this->getDefaultValue($activatedField, 0) : $this->getOldAttribute($activatedField);
            }
        }

        $this->innerMessage = FHtml::t('common', 'Saving');
        $this->_progressing = false;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->innerMessage = FHtml::t('common', 'Saved');
        $this->_progressing = true;
        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function beforeValidate()
    {
        $this->innerMessage = FHtml::t('common', 'Validating');
        $this->_progressing = false;
        return parent::beforeValidate();
    }

    public function afterValidate()
    {
        $this->innerMessage = FHtml::t('common', 'Validated');
        $this->_progressing = true;

        return parent::afterValidate();
    }

    public function beforeDelete()
    {
        $this->innerMessage = FHtml::t('common', 'Deleting');
        $this->_progressing = false;

        return parent::beforeDelete();
    }

    public function afterDelete()
    {
        $this->innerMessage = FHtml::t('common', 'Deleted');
        $this->_progressing = true;

        return parent::afterDelete();
    }

    public function refreshCache()
    {
        //FHtml::refreshCache();
    }

    //Dummy, Faker
    public static function createDummy($count = 0, $dummyValues = [], $autoSave = false)
    {
        $result = [];
        if ($count <= 0 || empty($count)) {
            $one = true;
            $count = 1;
        } else {
            $one = false;
        }
        if (!is_numeric($count) || $count <= 0)
            $count = 1;
        for ($i = 0; $i < $count; $i++) {
            $model = static::createDummyModel($dummyValues);
            if ($autoSave)
                $model->save();
            $result[] = $model;
        }

        return $one ? $result[0] : $result;
    }

    public static function createDummyModel($dummyValues = [])
    {
        $model = static::createNew();
        $columns = static::getTableColumns();
        foreach ($columns as $column) {
            if (is_object($column))
                $column_name = $column->name;
            else
                $column_name = $column;
            $model->setFieldValue($column_name, static::createDummyFieldValue($column));
        }
        return $model;
    }

    public static function createDummyFieldValue($column, $type = null)
    {
        // require the Faker autoloader
        $root = FHtml::getRootFolder();

        if (is_object($column)) {
            $column_name = $column->name;
            $type = $column->phpType;
        } else {
            $column_name = $column;
        }

        //        require_once "$root/common/components/Faker/src/Faker/Factory.php";
        //        $faker = Factory::create(FHtml::currentLocale());
        //        return $faker->imageUrl();
        return $column_name . rand(1, 1000);
    }
    //Dummy, Faker
}
