<?php

namespace common\base;


use common\components\FConfig;
use common\components\FFrontend;
use common\components\FHtml;
use common\components\FModel;
use yii\db\ActiveRecord;
use yii\helpers\BaseInflector;
use yii\helpers\StringHelper;
use backend\models\AuthPermission;
use yii\helpers\ArrayHelper;

/**
 * Class BaseDataObject
 * @package common\base
 */
class BaseDataObject extends BaseAPIObject
{
    /**
     * @var
     */
    public $id_array;

    /**
     * @var array
     */
    protected $oldContent = [];
    /**
     * @var array
     */
    private $changedContent = [];
    /**
     * @var
     */
    public $_csrf;

    /**
     * @var
     */
    protected $uploadedFiles;


    /**
     * @param  BaseDataObject $model
     */
    public function updateCommand($model, $sql)
    {
        try {
            $model::getDb()->createCommand($sql)->execute();
            return true;
        } catch (\yii\db\Exception $exception) {
            FHtml::addError($exception);
            return false;
        }
    }


    /**
     * @param $condition
     * @param array $values
     * @param bool $overrideIfExisted
     * @return bool|BaseDataObject
     */
    public static function createOrUpdate($condition, $values = [], $overrideIfExisted = true)
    {
        $model = static::findOne($condition);
        if (!isset($model)) {
            $model = FHtml::createModel(static::modelName());
            $overrideIfExisted = true;
        }
        if ($overrideIfExisted) {
            if (is_array($condition)) {
                foreach ($condition as $field => $value) {
                    FHtml::setFieldValue($model, $field, $value);
                }
            }
            foreach ($values as $field => $value) {
                FHtml::setFieldValue($model, $field, $value);
            }
            FHtml::setFieldValue($model, 'is_active', 1);
            FHtml::setFieldValue($model, 'application_id', FHtml::currentApplicationCode());

            if ($model->save())
                return $model;
            else
                return $model->errors;
        }
        return false;
    }


    public function setSortOrder($value)
    {
        if (FHtml::field_exists($this, 'sort_order'))
            FHtml::setFieldValue($this, 'sort_order', $value);
    }

    public function beforeValidate()
    {
        foreach ($this->attributes() as $attribute) {
            $value = $this->getAttribute($attribute);
            if (FHtml::isInArray($attribute, ['is_*']) && !isset($value) && !StringHelper::endsWith(static::className(), 'Search')) {
                //$this->setAttribute($attribute, true);
            } else if (is_array($value)) {
                $this->setAttribute($attribute, FHtml::encode($value));
            }
        }

        return parent::beforeValidate();
    }

    private $is_checkFormResubmission = true;
    public function checkFormResubmission($value = null)
    {
        if (isset($value))
            $this->is_checkFormResubmission = $value;
        return $this->is_checkFormResubmission && FHtml::checkFormResubmission($this);
    }

    public function getOldFieldValue($fieldname)
    {
        return static::getOldAttribute($fieldname);
    }

    public function isFieldValueChanged($fieldname)
    {
        return static::isAttributeChanged($fieldname);
    }

    public function getChangedContent()
    {
        $this->changedContent = [];
        foreach ($this->oldAttributes as $key => $value) {
            if ($this->isAttributeChanged($key))
                $this->changedContent = array_merge($this->changedContent, [$key => [$value => $this->getAttribute($key)]]);
        }
        return $this->changedContent;
    }

    public function setFieldValue($fieldname, $value)
    {
        return FHtml::setFieldValue($this, $fieldname, $value);
    }

    public static function saveAll($condition = [], $params = [])
    {
        if (empty($params) && is_array($condition)) {
            $models = $condition;
        } else {
            $models = static::findAll($condition);
        }

        if (is_array($models)) {
            foreach ($models as $model) {
                if (is_object($model)) {
                    if (!empty($params))
                        $model->load($params);
                    $model->save();
                }
            }
        }
    }

    public static function deleteAll($condition = '', $params = [])
    {
        if (is_array($params))
            return parent::deleteAll($condition, $params); // TODO: Change the autogenerated stub
        else
            return static::deleteEach($condition);
    }

    public static function deleteEach($condition = '')
    {
        $models = static::findAll($condition);
        foreach ($models as $model) {
            $model->delete();
        }
        return $models;
    }

    public function afterDelete()
    {
        // If Enabled Object Changes Log - Log data changed into Object_actions table
        if (FHtml::isObjectActionsLogEnabled($this->getTableName())) {
            FHtml::logObjectActions($this, FHtml::ACTION_DELETE, $this->attributes, [], 'Deleted successful !');
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub

        FHtml::refreshCache();

        FHtml::executeApplicationFunction($this->getTableName() . '_' . 'afterDelete', ['model' => $this]);
    }

    public function beforeDelete()
    {
        //delete attached files
        FModel::deleteObjectFile($this, $this->prepareUploadFields());

        return parent::beforeDelete();
    }

    public function delete()
    {

        return parent::delete();
    }

    public function softDelete()
    {
        static::disable();
    }

    public function disable()
    {
        static::inActive();
    }

    public function inActive()
    {
        FHtml::setFieldValue($this, ['is_active', 'isactive'], 0);
        FHtml::setFieldValue($this, ['is_deleted', 'deleted'], 1);

        $this->save();
    }

    public function restoreDelete()
    {
        static::enable();
    }

    public function enable()
    {
        static::active();
    }

    public function active()
    {
        FHtml::setFieldValue($this, ['is_active', 'isactive'], 1);
        FHtml::setFieldValue($this, ['is_deleted', 'deleted'], 0);

        $this->save();
    }


    public function showImage($width = '', $height = '', $fields = [],  $css = '', $showEmptyImage = true)
    {
        if (empty($fields))
            $fields = ['image', 'avatar', 'banner'];
        $tags = $this->getFieldValue(['tags', 'overview', 'description', 'name', 'title']);
        if (is_array($tags))
            $tags = FHtml::encode($tags);
        return FHtml::showImage($this->getFieldValue($fields), str_replace('_', '-', $this->getTableName()), $width, $height, $css, strip_tags($tags), $showEmptyImage);
    }

    public function showThumbnail($width = '', $height = '', $fields = [],  $css = '', $showEmptyImage = true)
    {
        if (empty($fields))
            $fields = ['thumbnail', 'image', 'banner'];
        $tags = $this->getFieldValue(['tags', 'overview', 'description', 'name', 'title']);
        if (is_array($tags)) {
            $tags = FHtml::encode($tags);
        }
        return FHtml::showImage($this->getFieldValue($fields), str_replace('_', '-', $this->getTableName()), $width, $height, $css, strip_tags($tags), $showEmptyImage);
    }

    public function showContent($fields = ['content'], $css = '')
    {
        if (empty($fields))
            $fields = ['content'];
        $result = FHtml::encode($this->getFieldValue($fields));

        if (!empty($this->wp_post_id)) {
            $result .= $this->getWPContent();
        }

        return FHtml::showDiv($result, $css);
    }

    public function showTags($url = '', $template = '{tag}', $color = '', $fields = ['tags', 'keywords'])
    {
        if (empty($fields))
            $fields = ['tags', 'keywords'];
        $result = $this->getFieldValue($fields);
        return FHtml::showTags($result, $url, $template, $color);
    }

    public function showDate($fields = [], $format = '', $showTime = false)
    {
        if (empty($fields))
            $fields = ['created_date'];
        $result = $this->getFieldValue($fields);

        return FHtml::showDate($result, $format, $showTime);
    }

    public function showPrice($color = '', $showFriendly = true, $showPrice = true, $fields = [])
    {
        if (empty($fields))
            $fields = ['price', 'cost'];

        $result = $this->getFieldValue($fields);

        return FHtml::showModelPrice($this, $color, $showFriendly, $showPrice);
    }

    public static function lookupData($table_name, $key, $value)
    {
        $arr = FModel::getComboArray("@$table_name", $table_name, '', false, $key, $value);
        return $arr;
    }

    public static function lookupLabel($table_name, $lookup_key, $lookup_value, $needle)
    {
        if (is_numeric($lookup_value)) {
            $condition = "$lookup_key = $lookup_value";
        } else {
            $condition = "$lookup_key = '$lookup_value'";
        }
        /** @var BaseDataObject $model */
        $model = FModel::createModel($table_name);
        if (isset($model)) {
            $object = $model::find()->where($condition)->one();

            return (isset($object) && FHtml::field_exists($object, $needle)) ? $object->{$needle} : "";
        }

        return '';
    }

    public function setValues($model, $fields = [], $copyFromNullValue = true)
    {
        if (is_array($model)) {
            FHtml::copyFieldValues($this, $model, null, $copyFromNullValue);
        } else {
            FHtml::copyFieldValues($this, $fields, $model, $copyFromNullValue);
        }
    }

    public static function updateAllCounters($counters, $condition = '', $params = [])
    {
        $custom_fields = [];
        $model1 = static::createNew();
        if (is_string($counters))
            $counters = explode(',', $counters);

        foreach ($counters as $field => $changed_value) {
            if (!FHtml::field_exists($model1, $field))
                $custom_fields[] = $field;
        }
        if (empty($custom_fields)) {
            return parent::updateAllCounters($counters, $condition, $params);
        } else {
            $models = static::findAll($condition);
            foreach ($models as $model) {
                $model->updateCounters($counters);
            }
        }
    }

    public function updateCounters($counters)
    {
        if (is_string($counters))
            $counters = explode(',', $counters);

        foreach ($counters as $name => $value) {
            if (is_numeric($name)) {
                $name = $value;
                $value = 1;
            }
            $field_value = $this->{$name};
            if (!isset($field_value) || !is_numeric($field_value))
                $field_value = 0;
            $this->{$name} = $field_value + $value;
        }

        return $this->save();
    }

    public function copyFrom($model, $fields = [], $copyFromNullValue = true)
    {
        return $this->setValues($model, $fields, $copyFromNullValue);
    }

    public function saveObjectAttributesArray($beforeSave = true)
    {
        $attributes = $this->getObjectAttributesArray();
        $object_type = $this->getTableName();
        $object_id = $this->getPrimaryKeyValue();

        if ($beforeSave) {
            //1. Save to Properties field
            $propertiesAttribute = $this->getPropertyField();

            if (!empty($propertiesAttribute)) {
                $result = [];
                foreach ($attributes as $key => $value) {
                    $result[] = ['meta_key' => $key, 'meta_value' => $value];
                }
                FHtml::setFieldValue($this, $propertiesAttribute, FHtml::encode($result));

                return true;
            }
        } else {

            //2. Save to Object_properties table
            $propertiesModel = $this->getPropertiesModel();
            if (isset($propertiesModel)) {
                return $propertiesModel->save();
            }

            //3. Save to object_attributes table
            if (FHtml::isTableExisted(FModel::TABLE_ATTRIBUTES)) {
                FHtml::saveObjectAttributes($this, $object_type, $object_id, [], $attributes);
            }

            return true;
        }
    }

    public function saveObjectItems()
    {
        $model = $this;
        $object_type = $this->getTableName();
        $object_id = $this->getPrimaryKeyValue();

        $this->saveObjectAttributesArray(false);
        FHtml::saveObjectFile($model, $object_type, $object_id);
        FHtml::saveCategory($model, $object_type, $object_id);
        FHtml::saveObjectRelations($model, $object_type, $object_id);
    }

    public function saveUploadFiles()
    {
        $this->uploadedFiles = FHtml::saveUploadedFiles($this);

        /*save value file upload*/
        //        $uploads = FModel::getModelUploadFields($this);
        //
        //        $attributes = $this->getAttributes();
        //        $_attributes = [];
        //
        //        array_walk($attributes, function($attribute, $key) use ($attributes, $uploads, &$_attributes){
        //            if (in_array($key, $uploads) && !empty($attributes[$key])) {
        //                $_attributes[$key] = strtolower($attribute);
        //            }
        //        });
        //
        //        if(!empty($_attributes) && !empty($this->getPrimaryKeyValue())) {
        //            //\Yii::$app->db->createCommand()->update($this->tableName, $_attributes, [$this->primaryKeyField() => $this->primaryKeyValue()])->execute();
        //        }
        /*save value file upload*/
    }

    public function save($runValidation = true, $attributeNames = null)
    {

        $insert = $this->isNewRecord;
        $tableName = $this::tableName();

        //unique Columns, find duplicated Models
        $unqiue_columns = $this->getUniqueFields();
        if (!empty($unqiue_columns)) {
            $duplicated_models = FModel::findDuplicatedModels($this);
            if (!empty($duplicated_models)) {
                foreach ($duplicated_models as $column => $errors) {
                    $this->addError($column, FHtml::t('message', "Duplicated value") . ". " . FHtml::getFieldLabel($this, $column) . " (" . FHtml::getFieldValue($this, $column) . ") " . FHtml::t('message', "has already been taken"));
                }

                if (FHtml::isAjaxRequest()) {
                    FHtml::clearMessages();
                    return $this->getInnerMessage();
                }

                return false;
            }
        }

        $this->saveUploadFiles();

        $lang = FHtml::currentLang();
        $saveLang = $this->isDBLanguagesEnabled() && $lang != FConfig::defaultLang() && FHtml::isLanguagesEnabled($this);
        if (!$insert && $saveLang) {
            // Save languages data
            FModel::saveTranslatedModel($this, $lang, false);
            $save = parent::save(false, $attributeNames);
        } else {
            $save = parent::save($runValidation, $attributeNames);

            if ($insert && $saveLang && $save) {
                //if is Insert, then after insert, save translated model for different language
                FModel::saveTranslatedModel($this, $lang, true);
            }
        }

        //Show success/ error message
        if (!$save || !empty($this->errors)) {
            if (\Yii::$app->request->isAjax) {
                FHtml::clearMessages(); // neu la goi Ajax thi show Error ở popup luôn, nên clear ở Session để không show Error ở view nữa
                return $this->getInnerMessage();
            }
        } else {
            if (!FHtml::isInArray($tableName, ['object_*'])) {
                $this->saveObjectItems();

                //unique Boolean Columns
                FModel::setModelUniqueBooleanColumns($this, $this->getUniqueBooleanFields(), $this->getUniqueBooleanFieldsCondition());
            }

            if (FHtml::isObjectActionsLogEnabled($this->getTableName())) {
                //Show success/ error message
                $object = FHtml::t('common', BaseInflector::camel2words(static::getTableName()));
                $object_title = FHtml::getFieldValue($this, ['name', 'title']);
                $object_id = FHtml::getFieldValue($this, ['id']);
                $action = FHtml::currentAction();

                // If Enabled Object Changes Log - Log data changed into Object_actions table
                FHtml::logObjectActions($this, $insert ? FHtml::ACTION_CREATE : FHtml::ACTION_EDIT, $this->oldContent, $this->attributes);

                if (!FHtml::isAjaxRequest() && in_array($action, ['create', 'update'])) {
                    $message = FHtml::t('common', 'Saved successfully');
                    FHtml::addMessage("$message. $object #$object_id - $object_title");
                }
            }

            $this->refreshCache();
        }


        return $save;
    }

    public function getUploadedFiles()
    {
        return $this->uploadedFiles;
    }

    public function approve($field = '', $value = FHtml::STATUS_ACTIVE)
    {
        if (empty($field))
            $field_arr = ['is_active', 'is_approved', 'status'];
        else if (is_string($field))
            $field_arr = [$field];
        else
            $field_arr = [];

        foreach ($field_arr as $field) {
            if (FHtml::field_exists($this, $field)) {
                $this->{$field} = $value;
                return $this->save();
            }
        }
        return false;
    }

    public function reject($field = '', $value = FHtml::STATUS_INACTIVE)
    {
        if (empty($field))
            $field_arr = ['is_active', 'is_approved', 'status'];
        else if (is_string($field))
            $field_arr = [$field];
        else
            $field_arr = [];

        foreach ($field_arr as $field) {
            if (FHtml::field_exists($this, $field)) {
                $this->{$field} = $value;
                return $this->save();
            }
        }
        return false;
    }

    public function getShowType($column)
    {
        return '';
    }

    public function normalizeFieldValues(
        $fields = [],
        $created_fields = ['category_id_array', 'is_active', 'category_id', 'created_user', 'created_date', 'application_id'],
        $updated_fields = ['category_id_array', 'category_id', 'modified_user', 'modified_date']
    ) {

        if (empty($fields))
            $fields = empty($this::COLUMNS_ARRAY) ? $this->attributes() : $this::COLUMNS_ARRAY;

        FModel::prepareFieldValues($this, $this->getTableName(), $fields, $created_fields, $updated_fields);
    }

    protected $isLoaded = false;
    public function beforeSave($insert)
    {
        if (!$this->isLoaded) {
            $this->normalizeFieldValues();
            $this->isLoaded = true;
        }

        if (FHtml::isObjectActionsLogEnabled($this->getTableName())) {
            foreach ($this->oldAttributes as $key => $value) {
                $this->oldContent = array_merge($this->oldContent, [$key => $value]);
            }
        }

        $this->saveObjectAttributesArray(true);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
