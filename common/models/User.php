<?php
namespace common\models;

use backend\models\Auth;
use backend\models\AuthPermission;
use backend\modules\app\models\AppUserDevice;
use common\base\BaseUser;
use common\components\FHtml;
use common\components\FSecurity;
use yii\helpers\ArrayHelper;

/**
 * Class User
 * @package common\models
 * @property Auth $auth
 */
class User extends BaseUser
{
    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        if (key_exists('User', $_POST)) {
            $userPost = $_POST['User'];
            if (key_exists('groups_array', $userPost)) {
                $groups = $userPost['groups_array'];
                FHtml::updateUserGroups($this, $groups);
            }

            if (key_exists('rights_array', $userPost)) {
                $roles = $userPost['rights_array'];
                FHtml::updateUserRoles($this, $roles);
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return $this|array
     */
    public function getGroups()
    {
        if (!FHtml::isTableExisted(AuthPermission::tableName()))
            return null;

        $models = $this->hasMany(AuthPermission::className(), ['object2_id' => 'id'])
            ->andOnCondition(['AND',
                ['relation_type' => 'group-user'],
                ['object2_type' => 'user']]);
        return $models;
    }

    /**
     * @return array
     */
    public function getGroupsArray() {

        $arr1 = (is_array($this->groups)) ? ArrayHelper::getColumn($this->groups, 'object_id') : [];
        $arr2 = (is_array($this->groups)) ? ArrayHelper::getColumn($this->groups, 'object_type') : [];

        $arr = array_unique(array_merge($arr1, $arr2));
        foreach ($arr as $key => $value) {
            if (empty($value))
                unset($arr[$key]);
        }
        return $arr;
    }

    /**
     * @return $this|array
     */
    public function getRights()
    {
        if (!FHtml::isTableExisted(AuthPermission::tableName()))
            return null;

        $models = $this->hasMany(AuthPermission::className(), ['object_id' => 'id'])
            ->andOnCondition(['AND',
                ['relation_type' => 'user-role'],
                ['object_type' => 'user']]);

        return $models;
    }

    /**
     * @return array
     */
    public function getRightsArray() {
        $arr1 = (is_array($this->rights)) ? ArrayHelper::getColumn($this->rights, 'object2_id') : [];
        $arr2 = (is_array($this->rights)) ? ArrayHelper::getColumn($this->rights, 'object2_type') : [];

        $arr = array_unique(array_merge($arr1, $arr2));
        foreach ($arr as $key => $value) {
            if (empty($value))
                unset($arr[$key]);
        }

        return $arr;
    }

    /*
  * @property AppUserDevice[] $devices
  */
    /**
     * @return null|\yii\db\ActiveQuery
     */
    public function getDevice()
    {
        if (!FHtml::isTableExisted(AppUserDevice::tableName()))
            return null;

        return $this->hasMany(AppUserDevice::className(), ['user_id' => 'id']);
    }

    public function getAuth()
    {
        if (!FHtml::isTableExisted(Auth::tableName()))
            return null;

        return $this->hasOne(Auth::className(), ['id' => 'auth_id']);
    }

    public function getAliasUserId() {
        return $this->id;
    }

    public function getRoleName() {
        if (isset($this->staff, $this->staff->role)) {
            return $this->staff->role->name;
        }

        if ($this->role == USER::ROLE_ADMIN)
            return FHtml::t('common', 'Admin');
        else if ($this->role == USER::ROLE_MODERATOR)
            return FHtml::t('common', 'Moderator');
        if ($this->role == USER::ROLE_USER)
            return FHtml::t('common', 'User');

        return $this->role;
    }

    public function getTabName() {
        return '';
    }

    public function getDepartmentName() {
        return '';
    }
}
