<?php

namespace common\models;

use backend\models\AuthPermission;
use common\components\FHtml;
use common\components\FSecurity;
use Yii;
use yii\base\NotSupportedException;
use yii\helpers\ArrayHelper;
use yii\web\IdentityInterface;

/**
 * User model
 *
 * @property integer $id
 * @property string $username
 * @property string $first_name
 * @property string $last_name
 * @property string $image
 * @property string $overview
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property string $auth_key
 * @property integer $status
 * @property string $role
 * @property string $application_id
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $password write-only password
 */
class AppUser extends User
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 1;

    const ROLE_USER = FHtml::ROLE_USER;
    const ROLE_MODERATOR = FHtml::ROLE_MODERATOR;
    const ROLE_ADMIN = FHtml::ROLE_ADMIN;
    const ROLE_ALL = FHtml::ROLE_ALL;
    const ROLE_NONE = FHtml::ROLE_NONE;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'app_user';
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (key_exists('AppUser', $_POST)) {
            $userPost = $_POST['AppUser'];
            if (key_exists('groups_array', $userPost)) {
                $groups = $userPost['groups_array'];
                FHtml::updateUserGroups($this, $groups);
            }

            if (key_exists('rights_array', $userPost)) {
                $roles = $userPost['rights_array'];
                FHtml::updateUserRoles($this, $roles);
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getGroups()
    {
        if (!FHTml::isDBSecurityEnabled() || !FHtml::isTableExisted(AuthPermission::tableName()))
            return null;
        $models = $this->hasMany(AuthPermission::className(), ['object2_id' => 'id'])
            ->andOnCondition([
                'AND',
                ['relation_type' => 'group-user'],
                ['object2_type' => 'app_user'],
                ['object_type' => 'auth_group']
            ]);

        return $models;
    }

    public function getGroupsArray()
    {
        return ArrayHelper::getColumn($this->groups, 'object_id');
    }

    public function getRights()
    {
        if (!FHTml::isDBSecurityEnabled() || !FHtml::isTableExisted(AuthPermission::tableName()))
            return null;
        $models = $this->hasMany(AuthPermission::className(), ['object_id' => 'id'])
            ->andOnCondition([
                'AND',
                ['relation_type' => 'user-role'],
                ['object2_type' => 'auth_role'],
                ['object_type' => 'app_user']
            ]);

        return $models;
    }

    public function getRightsArray()
    {
        return ArrayHelper::getColumn($this->rights, 'object2_id');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username, $check_applications = null)
    {
        if (!isset($check_applications)) {
            if (FHtml::currentApplicationId() !== DEFAULT_APPLICATION_ID) {
                $check_applications = true;
            } else if (APPLICATIONS_ENABLED) {
                $check_applications = false;
            } else if (empty(DEFAULT_APPLICATION_ID)) {
                $check_applications = false;
            } else {
                $check_applications = !in_array($username, FSecurity::USER_NAME_SUPERADMIN);
            }
        }

        if (in_array($username, FSecurity::USER_NAME_SUPERADMIN)) {
            $check_applications = false;
        }
        $check_applications = true;
        if (strpos($username, '@') !== false) {
            $model =  self::findOne(['email' => $username, 'status' => self::STATUS_ACTIVE], $check_applications);
            if (isset($model))
                return $model;
        }

        $model =  self::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE], $check_applications);

        if ((!isset($model) || !is_object($model)) && in_array($username, FSecurity::USER_NAME_ADMIN)) {
            $username = $username . '_' . FHtml::currentApplicationId();
            $model =  self::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE], true);
        }

        return $model;
    }
}
