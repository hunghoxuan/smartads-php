<?php

namespace backend\modules\smartscreen\models;

use backend\modules\smartscreen\Smartscreen;
use Yii;
use common\components\FHtml;
use common\components\FModel;
use common\models\BaseModel;
use frontend\models\ViewModel;
use yii\helpers\ArrayHelper;

/**
 * Developed by Hung Ho (Steve): ceo@mozagroup.com | hung.hoxuan@gmail.com | skype: hung.hoxuan | whatsapp: +84912738748
 * Software Outsourcing, Mobile Apps development, Website development: Make meaningful products for start-ups and entrepreneurs
 * MOZA TECH Inc: www.mozagroup.com | www.mozasolution.com | www.moza-tech.com | www.apptemplate.co | www.projectemplate.com | www.code-faster.com
 * This is the customized model class for table "smartscreen_file".
 */
class SmartscreenFile extends SmartscreenFileSearch
{
    const LOOKUP = [];

    const COLUMNS_UPLOAD = ['file','file_kind','file_size','file_duration',];
    const COLUMNS_CUSTOM = [];

    public $order_by = 'sort_order asc,is_active desc,created_date desc';

    const OBJECTS_RELATED = [];
    const OBJECTS_META = [];

    public static function getLookupArray($column = '') {
        if (key_exists($column, self::LOOKUP))
            return self::LOOKUP[$column];
        return [];
    }

    public function fields()
    {
        $fields = array_merge(parent::fields(), self::OBJECTS_RELATED);

        foreach (self::COLUMNS_UPLOAD as $field) {
            $this->{$field} = FHtml::getFileURL($this->{$field}, $this->getTableName());
        }
        return $fields;
    }

    public function prepareCustomFields() {
        parent::prepareCustomFields();

    }

    public static function getRelatedObjects() {
        return self::OBJECTS_RELATED;
    }

    public static function getMetaObjects() {
        return self::OBJECTS_META;
    }

    public function beforeSave($insert) {
        if (!empty($this->file) && empty($this->command))
            $this->command = SmartscreenScripts::COMMAND_DSPCLIP;
        else if (empty($this->file) && empty($this->command) && !empty($this->description))
            $this->command = SmartscreenScripts::COMMAND_DSPTEXT;

        $content_type = Smartscreen::getFileType($this->file);
        if ($this->command == SmartscreenContent::TYPE_HTML || $this->command == SmartscreenContent::TYPE_TEXT || $this->command == SmartscreenScripts::COMMAND_DSPTEXT || $this->command == 'marquee') {
            if (!empty($this->file))
                $this->file = '';
        } else if (in_array($content_type , [SmartscreenContent::TYPE_IMAGE, SmartscreenContent::TYPE_VIDEO]))
            $this->command = $content_type;

            if (empty($this->file_duration) && strlen($this->file_duration) == 0)
            $this->file_duration = null;

        if ($content_type == SmartscreenContent::TYPE_VIDEO && (!isset($this->file_duration) || !is_numeric($this->file_duration))) {
            $file= Smartscreen::getFileUrl($this->file, 'smartscreen-file', false);
            $kind = $this->file_kind;
            $this->file_duration = Smartscreen::getVideoDuration($file, $kind);
            $this->file_kind = $kind;
        } else if (!isset($this->file_duration))
            $this->file_duration = Smartscreen::getDefaultDuration();

        if (!empty($this->file_duration) && $this->file_kind == 'second') {
            $this->file_duration = ceil($this->file_duration);
        }

        return parent::beforeSave($insert);
    }

    public static function findAllCached() {
        $result = Smartscreen::Cache(self::tableName());
        if (isset($result) && !empty($result))
            return $result;

        $result = static::findAll([], "object_type, object_id, sort_order");
        Smartscreen::Cache(self::tableName(), $result);
        return $result;
    }

    public static function findOneCached($id) {
        if (empty($id) || $id == FHtml::NULL_VALUE)
            return null;
        if (!Smartscreen::isObjectCachable(static::tableName()))
            return static::findOne($id);

        $models = static::findAllCached();
        foreach ($models as $model) {
            if ($model->id == $id)
                return $model;
        }
        return static::findOne($id);
    }

    public function afterSave($insert, $changedAttributes)
    {
        Smartscreen::clearCache();
        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        Smartscreen::clearCache();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {
        return true;
    }
}
