<?php

namespace backend\modules\smartscreen\models;

use backend\modules\app\App;
use backend\modules\app\models\AppVersion;
use backend\modules\smartscreen\Smartscreen;
use Yii;
use common\components\FHtml;
use common\components\FModel;
use common\models\BaseModel;
use frontend\models\ViewModel;
use yii\helpers\ArrayHelper;

/**



 * This is the customized model class for table "smartscreen_station".
 */
class SmartscreenStation extends SmartscreenStationSearch
{
    const LOOKUP = [
        'channel_id' => '@smartscreen_channels',
        'status' => [FHtml::STATUS_INACTIVE, FHtml::STATUS_ACTIVE]
    ];

    public $order_by = 'dept_id desc, room_id asc, last_update desc';

    public $is_upgrade;
    public $app_version_id;

    const COLUMNS_UPLOAD = [];

    const OBJECTS_RELATED = [];
    const OBJECTS_META = [];

    public static function getLookupArray($column = '')
    {
        if (key_exists($column, self::LOOKUP))
            return self::LOOKUP[$column];
        return [];
    }

    public function fields()
    {
        $fields = array_merge(parent::fields(), self::OBJECTS_RELATED);

        foreach (self::COLUMNS_UPLOAD as $field) {
            $this->{$field} = FHtml::getFileURL($this->{$field}, $this->getTableName());
        }
        return $fields;
    }


    // Lookup Object: branch\n
    public $branch;
    public function getBranch()
    {
        if (!isset($this->branch))
            $this->branch = FHtml::getModel('qms_branch', '', $this->branch_id, '', false);

        return $this->branch;
    }
    public function setBranch($value)
    {
        $this->branch = $value;
    }

    // Lookup Object: script\n
    public $script;
    public function getScript()
    {
        if (!isset($this->script))
            $this->script = FHtml::getModel('smartscreen_scripts', '', $this->script_id, '', false);

        return $this->script;
    }
    public function setScript($value)
    {
        $this->script = $value;
    }


    public function prepareCustomFields()
    {
        parent::prepareCustomFields();

        $this->branch = self::getBranch();
        $this->script = self::getScript();
    }


    public static function getRelatedObjects()
    {
        return self::OBJECTS_RELATED;
    }

    public static function getMetaObjects()
    {
        return self::OBJECTS_META;
    }

    function afterDelete()
    {
        Smartscreen::clearCacheKey(self::tableName());
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function updateLastUpdate($time  = null)
    {
        if (!isset($time))
            $time = time();
        FModel::executeSql("UPDATE " . self::tableName() . " SET last_update=" . $time . " WHERE id=" . $this->id);
        Smartscreen::clearCacheKey(self::tableName());
    }

    public static function findAllCached()
    {
        $result = Smartscreen::Cache(self::tableName());
        if (isset($result) && !empty($result))
            return $result;

        $result = static::findAll();
        Smartscreen::Cache(self::tableName(), $result);
        return $result;
    }

    public static function findOneCached($id)
    {
        if (empty($id) || $id == FHtml::NULL_VALUE)
            return null;
        if (Smartscreen::isObjectCachable(static::tableName())) {
            $models = static::findAllCached();
            foreach ($models as $model) {
                if ((is_numeric($id) && ($model->id == $id)) || ($model->ime == $id))
                    return $model;
            }
        }

        if (is_numeric($id))
            return static::findOne($id);
        else
            return static::findOne(['ime' => $id]);
    }

    public function afterSave($insert, $changedAttributes)
    {
        //Smartscreen::clearCache();  // HUNG: DO NOT CLEAR CACHE if Station is updated !
        Smartscreen::clearCacheKey(self::tableName());

        if ($this->isFieldValueChanged('channel_id'))
            Smartscreen::refreshSchedulesAndPushToDevices($this->id, Smartscreen::REFRESH_SCHEDULE_NOW);

        $this->is_upgrade = $this->loadFieldValue('_is_upgrade');

        if ($this->is_upgrade) {
            $this->app_version_id = $this->loadFieldValue('_app_version_id');
            if (!empty($this->app_version_id)) {
                $app_version = AppVersion::findOne($this->app_version_id);
                if (isset($app_version)) {
                    App::notifyAppVersionUpdate($this->ime, $app_version);
                }
            }
        }

        return parent::afterSave($insert, $changedAttributes);
    }

    public static function findAllForCombo($condition = [], $id_field = 'id', $display_name = 'name', $order_by = '')
    {
        $models = static::findAll($condition, $order_by);
        $arr = [];
        foreach ($models as $model) {
            $arr[] = [$model->id => $model->name . (!empty($model->description) ? " ($model->description . id:$model->id)" : " (id:$model->id)")];
        }
        return $arr;
    }

    public function beforeSave($insert)
    {
        if (empty($this->name))
            $this->name = $this->ime;

        if (!empty($this->status) && !$insert && (!empty($this->dept_id) && !empty($this->room_id))) {
            $this->status = Smartscreen::STATUS_ACTIVE;
        }

        //?
        $this->room_id = strtoupper($this->room_id);

        return parent::beforeSave($insert);
    }

    public function getUniqueColumns()
    {
        return ['name', 'ime'];
    }
}
