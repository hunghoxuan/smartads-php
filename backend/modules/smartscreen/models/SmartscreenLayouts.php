<?php

namespace backend\modules\smartscreen\models;

use backend\modules\smartscreen\Smartscreen;
use common\components\FHtml;

/**
 * Developed by Hung Ho (Steve): ceo@mozagroup.com | hung.hoxuan@gmail.com | skype: hung.hoxuan | whatsapp: +84912738748
 * Software Outsourcing, Mobile Apps development, Website development: Make meaningful products for start-ups and entrepreneurs
 * MOZA TECH Inc: www.mozagroup.com | www.mozasolution.com | www.moza-tech.com | www.apptemplate.co | www.projectemplate.com | www.code-faster.com
 * This is the customized model class for table "smartscreen_layouts".
 */
class SmartscreenLayouts extends SmartscreenLayoutsBase
{

    public $list_frame;
    public $frame;

    public function rules()
    {
        return [

            [['id', 'name', 'description', 'sort_order', 'is_active', 'created_date', 'modified_date', 'appilication_id'], 'filter', 'filter' => 'trim'],

            [['name'], 'required'],
            [['list_frame', 'frame'], 'safe'],
            [['description'], 'string'],
            [['sort_order', 'is_active', 'created_date', 'modified_date'], 'integer'],
            [['name'], 'string', 'max' => 255],
            [['appilication_id'], 'string', 'max' => 100],
        ];
    }

    const LOOKUP = [];

    const COLUMNS_UPLOAD = [];

    public $order_by = 'sort_order asc,is_active desc,created_date desc,';

    const OBJECTS_RELATED = [];
    const OBJECTS_META = [];

    public static function getLookupArray($column = '')
    {
        if (key_exists($column, self::LOOKUP))
            return self::LOOKUP[$column];
        return [];
    }

    public function fields()
    {
        $fields = array_merge(parent::fields(), self::OBJECTS_RELATED);

        foreach (self::COLUMNS_UPLOAD as $field) {
            $this->{$field} = FHtml::getFileURL($this->{$field}, $this->getTableName());
        }
        return $fields;
    }


    public function prepareCustomFields()
    {
        parent::prepareCustomFields();

    }

    public function beforeSave($insert)
    {
//        Auto add time to database
        $current_time = time();
        if ($this->isNewRecord) {
            $this->created_date = $current_time;
        }

        if (!$this->isNewRecord) {
            $this->modified_date = $current_time;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function findAllCached() {
        $result = Smartscreen::Cache(self::tableName());
        if (isset($result) && !empty($result))
            return $result;

        $result = static::findAll();
        Smartscreen::Cache(self::tableName(), $result);
        return $result;
    }

    public static function findOneCached($id) {
        if (empty($id) || $id == FHtml::NULL_VALUE)
            return null;
        if (!Smartscreen::isObjectCachable(static::tableName()))
            return static::findOne($id);

        $models = static::findAllCached();
        foreach ($models as $model) {
            if ($model->id == $id)
                return $model;
        }
        return static::findOne($id);
    }

    public function beforeDelete()
    {
        Smartscreen::clearCache();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        Smartscreen::clearCache();
        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getRelatedObjects()
    {
        return self::OBJECTS_RELATED;
    }

    public static function getMetaObjects()
    {
        return self::OBJECTS_META;
    }

    public function getFrameQuery()
    {
        $query = SmartscreenFrame::find();
        $query->multiple = true;
        $query->innerJoin('smartscreen_layouts_frame', 'smartscreen_layouts_frame.frame_id = smartscreen_frame.id');
        $query->andWhere(['smartscreen_layouts_frame.layout_id' => $this->id]);
        $query->orderBy(['smartscreen_layouts_frame.sort_order' => SORT_ASC]);
        //FHtml::var_dump($query); die;
        return $query;
    }

}
