<?php

namespace backend\modules\smartscreen\models;

use backend\modules\smartscreen\Smartscreen;
use Yii;
use common\components\FHtml;
use common\components\FModel;
use common\models\BaseModel;
use frontend\models\ViewModel;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;


class SmartscreenCampaigns extends SmartscreenSchedules
{
    public function search($params, $andWhere = '')
    {
        FHtml::loadParams($this, $params);

        $start_time = null;
        $finished_schedule_id = null;
        $schedule_id = null;

        $device_id = !empty($this->device_id) ? $this->device_id : null;
        $channel_id = !empty($this->channel_id) ? $this->channel_id : null;

        $query = static::getQuery($channel_id, $device_id, $this->date, $this->date_end);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        return $dataProvider;
    }

    public static function getQuery($channel_id, $device_id,  $date = null, $date_end = null)
    {
        if (empty($date_end))
            $date_end = $date;
        $type = Smartscreen::SCHEDULE_TYPE_CAMPAIGN;

        $query = SmartscreenSchedules::find()
            ->where("(type='$type')")
            ->orderBy('date desc');

        if (!empty($device_id) && $device_id != FHtml::NULL_VALUE)
            $query = $query->andWhere("device_id = '$device_id' or device_id like '%$device_id%' ");

        if (!empty($channel_id) && $channel_id != FHtml::NULL_VALUE)
            $query = $query->andWhere("channel_id = $channel_id");

        if (!empty($date)) {
            $sql_condition = Smartscreen::getDateSqlCondition($date, $date_end);
            $query = $query->andWhere($sql_condition);
        }

        return $query;
    }

    public static function findAll($condition = [], $order_by = [], $page_size = -1, $page = 1, $isCached = false, $display_fields = [], $asArray = false, $load_activeonly = true)
    {
        $device_id = isset($condition['device_id']) ? $condition['device_id'] : null;
        $channel_id = isset($condition['channel_id']) ? $condition['channel_id'] : null;

        $query = static::getQuery($channel_id, $device_id);

        $models = $query->all();
        return $models;
    }

    public function beforeSave($insert)
    {
        $this->type = Smartscreen::SCHEDULE_TYPE_CAMPAIGN;
        $this->_start_time = $this->start_time;
        //$this->start_time =  null;
        $this->{SmartscreenSchedules::FIELD_STATUS} = $this->is_active;

        if (isset($_POST['SmartscreenSchedules']['end_time']))
            $this->end_time = $_POST['SmartscreenSchedules']['end_time'];

        $changed = $this->getChangedContent();
        if (!empty($this->start_time) && isset($changed['duration']) && array_keys($changed['duration'])[0] != array_values($changed['duration'])[0]) {
            $this->end_time = Smartscreen::getNextStartTime($this->start_time,  $this->duration);
        } else if (!empty($this->end_time) && !empty($this->start_time)) {
            $this->duration = Smartscreen::getDurationBetween($this->start_time, 0, $this->end_time);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $runValidation)
    {
        $schedules = SmartscreenSchedules::find()->where([self::FIELD_CAMPAIGN_ID => $this->id])->all();
        foreach ($schedules as $schedule) {
            Smartscreen::updateCampaignSchedules($this, $schedule);
            $schedule->save();
        }
        if (!empty($this->device_id)) {
            $devices = FHtml::decode($this->device_id, true);
            if (is_array($devices)) {
                foreach ($devices as $device_id) {
                    if  (!is_numeric($device_id))
                        continue;
                    $device = SmartscreenStation::findOne($device_id);
                    $arr = FHtml::decode($device->{SmartscreenStation::FIELD_CAMPAIGN_ID}, true);
                    if (!is_array($arr))
                        $arr= [];
                    $arr[] = $this->id;
                    $device->{SmartscreenStation::FIELD_CAMPAIGN_ID} = array_unique($arr);
                    $device->save();
                }
            }
        }
        Smartscreen::clearCache();
        return parent::afterSave($insert, $runValidation); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        SmartscreenSchedules::deleteAll([self::FIELD_CAMPAIGN_ID => $this->id]);
        Smartscreen::clearCache();
        return parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function getReturnUrl() {
        $params = Smartscreen::getCurrentParams(null);
        return FHtml::createUrl('smartscreen/smartscreen-campaigns/index', $params);
    }

    public static function findAllCached() {
        $result = Smartscreen::Cache(self::tableName()."_Campaign");
        if (isset($result) && !empty($result))
            return $result;

        $result = static::findAll();
        Smartscreen::Cache(self::tableName()."_Campaign", $result);
        return $result;
    }

    public static function findOneCached($id) {
        if (empty($id) || $id == FHtml::NULL_VALUE)
            return null;
        if (!Smartscreen::isObjectCachable(static::tableName()))
            return static::findOne($id);

        $models = static::findAllCached();
        foreach ($models as $model) {
            if ($model->id == $id)
                return $model;
        }
        return static::findOne($id);
    }

    public function afterFind() {
        $this->end_time = Smartscreen::getNextStartTime($this->start_time, $this->duration, 1, null, true);
        return parent::afterFind();
    }

}
