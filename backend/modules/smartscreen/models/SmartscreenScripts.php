<?php

namespace backend\modules\smartscreen\models;

use backend\modules\smartscreen\Qms;
use backend\modules\smartscreen\Smartscreen;
use Yii;
use common\components\FHtml;
use common\components\FModel;
use common\models\BaseModel;
use frontend\models\ViewModel;
use yii\helpers\ArrayHelper;

/**
 * 

 * 
 * This is the customized model class for table "smartscreen_scripts".
 */
class SmartscreenScripts extends SmartscreenScriptsBase //\yii\db\ActiveRecord
{
    public $list_content;

    const COMMAND_DSPTEXT = 'dsptext';
    const COMMAND_DSPBASICFORM = 'dspbasicform';
    const COMMAND_DSPCLIP = 'dspclip';
    const COMMAND_DSPIE = 'dspie';
    const COMMAND_LOOP = 'loop';

    const LOOKUP = [];

    const COLUMNS_UPLOAD = ['Logo', 'TopBanner', 'Clip1', 'Clip2', 'Clip3', 'Clip4', 'Clip5', 'Clip6', 'Clip7', 'Clip8', 'Clip9', 'Clip10', 'Clip11', 'Clip12', 'Clip13', 'Clip14', 'scripts_file'];

    public $order_by = 'sort_order asc,is_active desc,';

    const OBJECTS_RELATED = [];
    const OBJECTS_META = [];


    public function prepareCustomFields()
    {
        parent::prepareCustomFields();
    }

    public static function getLookupArray($column = '')
    {
        if (key_exists($column, self::LOOKUP))
            return self::LOOKUP[$column];
        return [];
    }

    public static function getRelatedObjects()
    {
        return self::OBJECTS_RELATED;
    }

    public static function getMetaObjects()
    {
        return self::OBJECTS_META;
    }

    public function beforeSave($insert)
    {
        $post = $_POST[$this->formName()];

        for ($i = 1; $i < 16; $i++) {

            if (!FHtml::field_exists($this, "Line$i"))
                continue;

            $field_value = '';
            $command = $post["Line{$i}_command"];

            $index = $post["Line{$i}_index"];
            $mode = $post["Line{$i}_mode"];
            $duration = $post["Line{$i}_duration"];

            $field_value = Smartscreen::getScriptCommandLine($command, $index, $mode, $duration);

            FHtml::setFieldValue($this, "Line$i", $field_value);
        }

        if (strtotime($this->ReleaseDate) < strtotime(date('Y-m-d')))
            $this->ReleaseDate = FHtml::Now();

        $this->Clipnum = Smartscreen::countFields($this, 'Clip$i');
        $this->CommandNumber = Smartscreen::countFields($this, 'Line$i');

        $this->scripts_content = Smartscreen::showXmlSmartScreenScript($this);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->list_content = $this->smartscreenFiles;
        return parent::afterFind();
    }

    public function afterSave($insert, $runValidation)
    {
        Smartscreen::clearCache();

        $media_files = $this->smartscreenFiles;
        if (empty($this->list_content)) {
            foreach ($media_files as $media_file)
                $media_file->delete();
        } else {
            $ids = array_column($this->list_content, 'id');

            foreach ($media_files as $media_file) {
                if (!in_array($media_file->id, $ids))
                    $media_file->delete();
            }
        }

        return parent::afterSave($insert, $runValidation);
    }

    public function getCustomFields()
    {
        $arr = ['smartscreen_scripts'];
        for ($i = 1; $i < 17; $i++) {
            $arr = array_merge($arr, ["Line{$i}_command", "Line{$i}_index", "Line{$i}_duration", "Line{$i}_mode"]);
        }
        return $arr;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSmartscreenFiles()
    {
        return $this->hasMany(SmartscreenFile::className(), ['object_id' => 'id', 'object_type' => self::tableName()]);
    }

    public function afterDelete()
    {
        Smartscreen::clearCache();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }
}
