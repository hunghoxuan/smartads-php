<?php

namespace backend\modules\smartscreen\models;

use backend\modules\smartscreen\Smartscreen;
use common\components\FHtml;
use common\components\FModel;


class SmartscreenChannels extends SmartscreenChannelsBase
{
    const LOOKUP = [
    ];

    const COLUMNS_UPLOAD = ['image' ];

    public $order_by = 'is_active desc, created_date desc';


    const OBJECTS_META = [];

    public static function getLookupArray($column = '')
    {
        if (key_exists($column, self::LOOKUP))
            return self::LOOKUP[$column];
        return [];
    }

    public function fields()
    {
        $fields = array_merge(parent::fields(), self::OBJECTS_RELATED);

        foreach (self::COLUMNS_UPLOAD as $field) {
            $this->{$field} = FHtml::getFileURL($this->{$field}, $this->getTableName());
        }
        return $fields;
    }


    public function prepareCustomFields()
    {
        parent::prepareCustomFields();
    }

    public static function getRelatedObjects()
    {
        return self::OBJECTS_RELATED;
    }

    public static function getMetaObjects()
    {
        return self::OBJECTS_META;
    }

    public function getDevice_id()
    {
        if (empty($this->device_id))
            $this->device_id = self::getDevices();
        return $this->device_id;
    }

    private $device_id;
    public function setDevice_id($value) {
        $this->device_id = $value;
    }

    public function afterDelete()
    {
        Smartscreen::clearCache();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function getDevices() {
        return $this->hasMany(SmartscreenStation::className(), ['channel_id' => 'id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        Smartscreen::clearCache();
        $devices = $this->getDevices()->all();

        if (is_array($devices) && !empty($devices)) {
            foreach ($devices as $device) {
//                if (isset($device) && (empty($this->device_id) || !in_array($device->id, $this->device_id))) {
//                    $device->channel_id = null;
//                    $device->save();
//                }
                if ($this->is_active != $device->status) {
                    $device->status = $this->is_active;
                    $device->update();
                }
            }
        }

//        if (!empty($this->device_id)) {
//            foreach ($this->device_id as $device_id) {
//                $station = SmartscreenStation::findOne($device_id);
//                if (isset($station)) {
//                    $station->channel_id = $this->id;
//                    $station->save();
//                }
//            }
//        }


        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function findAllCached() {
        $result = Smartscreen::Cache(self::tableName());
        if (isset($result) && !empty($result))
            return $result;

        $result = static::findAll();
        Smartscreen::Cache(self::tableName(), $result);
        return $result;
    }

    public static function findOneCached($id) {
        if (empty($id) || $id == FHtml::NULL_VALUE)
            return null;
        if (!Smartscreen::isObjectCachable(static::tableName()))
            return static::findOne($id);

        $models = static::findAllCached();
        foreach ($models as $model) {
            if ($model->id == $id)
                return $model;
        }
        return static::findOne($id);
    }

    public function getUniqueBooleanColumns()
    {
        return ['is_default'];
    }

    public function getUniqueBooleanColumnsCondition()
    {
        return [];
    }
}